class Solution:
    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:
        cntr = 0
        
        #Edge case if n is zero
        #i.e no planting is required
        #return True
        if n == 0:
            return True
        
        #For the case where there is only
        #one pot. In this case check if 
        #that position is already planted 
        #or not. If it is not planted and 
        #number of plants to be planted 
        #to be planted is just 1 then return
        #True else return False. 
        if len(flowerbed)<2 and n<2:
            if flowerbed[0] == 0 and n==1:
                return True
            else:
                return False
        
        #For the 0th position check if the
        #first position is already planted
        #if not then plant and increase the cntr.
        #if cntr is same as n then break and return 
        #True.
        if flowerbed[1] != 1 and flowerbed[0] == 0:
            flowerbed[0] = 1
            cntr +=1
            if cntr == n:
                return True
        
        #Start from the 1th position and check if 
        #there's a plant before or after it
        #If there aren't then plant and increment the
        #cntr. 
        #If the cntr is same as n then return break and return
        #True else continue. 
        for i in range(1,len(flowerbed)-1):
            if flowerbed[i] != 1:
                if flowerbed[i-1] != 1 and flowerbed[i+1] != 1:
                    flowerbed[i] = 1
                    cntr+=1
                    if cntr == n:
                        return True
        
        #For the last position check if the second last position is 
        #already planted. If not then plant and increment the cntr.
        if flowerbed[len(flowerbed)-1] == 0 and flowerbed[len(flowerbed)-2] == 0:
            flowerbed[len(flowerbed)-1] = 1
            cntr +=1
            if cntr == n:
                return True
            
        return False