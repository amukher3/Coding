# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

"""
# Approach is, start traversal from right
# since we need to flip the tree. We probably
# have to do post-order here because 
# otherwise we otherwise wouldn't have
# the values from both the sides of the 
# tree(from that node to the leaf) to do the flip. 
# i.e for doing A, B = B, A we need both A, B.
# We can't use the condition "if node.left is not None"
# or "node.right is not None" because then getting the
# last value till the leaf node would be
# difficult hence let it go to the leaf node and 
# then stop the recursion. 
"""

class Solution:
    
    def helper(self, node):
        
        if node is None:
            return
    
        right = self.helper(node.right)
        left = self.helper(node.left)
        
        node.left = right
        node.right = left
        
        return node
                
    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        
        new_root = self.helper(root)
        return new_root
        
        